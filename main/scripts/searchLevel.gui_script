local node1
local node2

local node1Col
local node1Row
local node1Char
local node2Col
local node2Row
local node2Char
local wordBank
local wordBankSize = 0

-- KNOWN ISSUES
-- words_match(word, existing) does not work properly
--      - sometimes, on overlapping words, the equal comparisions aren't equal
--         but they're treated as such

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	print("searchLevelInit")
	msg.post(".", "acquire_input_focus")
	clear_board()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add level details here 
	if message_id == hash("init_tiles") then
		print("Initializing tiles...")
		wordBank = message
		for k in pairs(wordBank.words) do 
			wordBankSize = wordBankSize + 1
		end
		place_word(0)
	end
	if message_id == hash("tile_selected") then

	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	local boxCol
	local boxRow
	if action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col0"), action.x, action.y) then
		-- == Column 0 ==
		boxCol = 0
		if action.pressed and gui.pick_node(gui.get_node("tile0-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile0-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col1"), action.x, action.y) then
		-- == Column 1 ==
		boxCol = 1
		if action.pressed and gui.pick_node(gui.get_node("tile1-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile1-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col2"), action.x, action.y) then
		-- == Column 2 ==
		boxCol = 2
		if action.pressed and gui.pick_node(gui.get_node("tile2-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile2-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col3"), action.x, action.y) then
		-- == Column 3 ==
		boxCol = 3
		if action.pressed and gui.pick_node(gui.get_node("tile3-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile3-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col4"), action.x, action.y) then
		-- == Column 4 ==
		boxCol = 4
		if action.pressed and gui.pick_node(gui.get_node("tile4-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile4-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col5"), action.x, action.y) then
		-- == Column 5 ==
		boxCol = 5
		if action.pressed and gui.pick_node(gui.get_node("tile5-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile5-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col6"), action.x, action.y) then
		-- == Column 6 ==
		boxCol = 6
		if action.pressed and gui.pick_node(gui.get_node("tile6-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile6-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col7"), action.x, action.y) then
		-- == Column 7 ==
		boxCol = 7
		if action.pressed and gui.pick_node(gui.get_node("tile7-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile7-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col8"), action.x, action.y) then
		-- == Column 8 ==
		boxCol = 8
		if action.pressed and gui.pick_node(gui.get_node("tile8-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile8-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col9"), action.x, action.y) then
		-- == Column 9 ==
		boxCol = 9
		if action.pressed and gui.pick_node(gui.get_node("tile9-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile9-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col10"), action.x, action.y) then
		-- == Column 10 ==
		boxCol = 10
		if action.pressed and gui.pick_node(gui.get_node("tile10-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile10-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	elseif action_id == hash("touch") and action.pressed and gui.pick_node(gui.get_node("col11"), action.x, action.y) then
		-- == Column 11 ==
		boxCol = 11
		if action.pressed and gui.pick_node(gui.get_node("tile11-0"), action.x, action.y) then
			boxRow = 0
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-1"), action.x, action.y) then
			boxRow = 1
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-2"), action.x, action.y) then
			boxRow = 2
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-3"), action.x, action.y) then
			boxRow = 3
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-4"), action.x, action.y) then
			boxRow = 4
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-5"), action.x, action.y) then
			boxRow = 5
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-6"), action.x, action.y) then
			boxRow = 6
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-7"), action.x, action.y) then
			boxRow = 7
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-8"), action.x, action.y) then
			boxRow = 8
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-9"), action.x, action.y) then
			boxRow = 9
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-10"), action.x, action.y) then
			boxRow = 10
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		elseif action.pressed and gui.pick_node(gui.get_node("tile11-11"), action.x, action.y) then
			boxRow = 11
			setBoxData(boxCol, boxRow, gui.get_text(gui.get_node("letter"..boxCol.."-"..boxRow)), "tile"..boxCol.."-"..boxRow)
			highlight_boxes()
		end
	end
	
	if action.pressed and gui.pick_node(gui.get_node("leftArrow"), action.x, action.y) then
		print("Left arrow pressed: ")
	end
	if action.pressed and gui.pick_node(gui.get_node("rightArrow"), action.x, action.y) then
		print("Right arrow pressed")
	end
end

function highlight_boxes()
	-- if node1 ~= nil then
	-- 	if node2 ~= nil then
	-- 		-- Both nodes selected, need to do validity checks here
	-- 		if check_if_valid_nodes() == true then
	-- 			if(gui.get_color(node2) == vmath.vector4(1, 1, 1, 1)) then
	-- 				print("HIGHLIGHTING NODE2")
	-- 				highlight_box(node2)
	-- 			end
	-- 		end
	-- 	else
	-- 		if(gui.get_color(node1) == vmath.vector4(1, 1, 1, 1)) then
	-- 			print("HIGHLIGHTING NODE1")
	-- 			highlight_box(node1)
	-- 		end
	-- 	end
	-- end
end

function highlight_valid()
	local highCol = math.max(node1Col, node2Col)
	local lowCol = math.min(node1Col, node2Col)
	local highRow = math.max(node1Row, node2Row)
	local lowRow = math.min(node1Row, node2Row)
	local numIter = math.max(highCol-lowCol, highRow-lowRow)
	local nodeName = ""

	if highRow == lowRow then
		-- same row
		for i = lowCol, highCol do
			highlight_box(gui.get_node("tile"..i.."-"..lowRow))
		end
	elseif highCol == lowCol then
		-- same col
		for i = lowRow, highRow do
			highlight_box(gui.get_node("tile"..lowCol.."-"..i))
		end
	else
		-- must be a verified diagonal
		if node1Col < node2Col and node1Row < node2Row then
			-- c1 < c2
			-- r1 < r2
			-- [1][ ][ ]
			-- [ ][X][ ]
			-- [ ][ ][2]
			for i=0, numIter do
				highlight_box(gui.get_node("tile"..(lowCol+i).."-"..(lowRow+i)))
			end
		elseif node1Col > node2Col and node1Row > node2Row then
			-- c1 > c2
			-- r1 > r2
			-- [2][ ][ ]
			-- [ ][X][ ]
			-- [ ][ ][1]
			for i=0, numIter do
				highlight_box(gui.get_node("tile"..(highCol-i).."-"..(highRow-i)))
			end
		elseif  node1Col < node2Col and node1Row > node2Row then
			-- c1 < c2
			-- r1 > r2
			-- [ ][ ][2]
			-- [ ][X][ ]
			-- [1][ ][ ]
			for i=0, numIter do
				highlight_box(gui.get_node("tile"..(lowCol+i).."-"..(highRow-i)))
			end
		elseif  node1Col > node2Col and node1Row < node2Row then
			-- c1 > c2
			-- r1 < r2
			-- [ ][ ][1]
			-- [ ][X][ ]
			-- [2][ ][ ]
			for i=0, numIter do
				highlight_box(gui.get_node("tile"..(highCol-i).."-"..(lowRow+i)))
			end
		end
	end
end

function unhighlight_valid()
	local highCol = math.max(node1Col, node2Col)
	local lowCol = math.min(node1Col, node2Col)
	local highRow = math.max(node1Row, node2Row)
	local lowRow = math.min(node1Row, node2Row)
	local numIter = math.max(highCol-lowCol, highRow-lowRow)
	local nodeName = ""

	if highRow == lowRow then
		-- same row
		for i = lowCol, highCol do
			unhighlight_box(gui.get_node("tile"..i.."-"..lowRow))
		end
	elseif highCol == lowCol then
		-- same col
		for i = lowRow, highRow do
			unhighlight_box(gui.get_node("tile"..lowCol.."-"..i))
		end
	else
		-- must be a verified diagonal
		if node1Col < node2Col and node1Row < node2Row then
			-- c1 < c2
			-- r1 < r2
			-- [1][ ][ ]
			-- [ ][X][ ]
			-- [ ][ ][2]
			for i=0, numIter do
				unhighlight_box(gui.get_node("tile"..(lowCol+i).."-"..(lowRow+i)))
			end
		elseif node1Col > node2Col and node1Row > node2Row then
			-- c1 > c2
			-- r1 > r2
			-- [2][ ][ ]
			-- [ ][X][ ]
			-- [ ][ ][1]
			for i=0, numIter do
				unhighlight_box(gui.get_node("tile"..(highCol-i).."-"..(highRow-i)))
			end
		elseif  node1Col < node2Col and node1Row > node2Row then
			-- c1 < c2
			-- r1 > r2
			-- [ ][ ][2]
			-- [ ][X][ ]
			-- [1][ ][ ]
			for i=0, numIter do
				unhighlight_box(gui.get_node("tile"..(lowCol+i).."-"..(highRow-i)))
			end
		elseif  node1Col > node2Col and node1Row < node2Row then
			-- c1 > c2
			-- r1 < r2
			-- [ ][ ][1]
			-- [ ][X][ ]
			-- [2][ ][ ]
			for i=0, numIter do
				unhighlight_box(gui.get_node("tile"..(highCol-i).."-"..(lowRow+i)))
			end
		end
	end
end

function highlight_box(node)
	local color = vmath.vector4(1, 1, 0, 1)
	color.w = 0.5
	gui.animate(node, gui.PROP_COLOR, color, gui.EASING_LINEAR, 0.1)
end

function unhighlight_box(node)
	local color = vmath.vector4(1, 1, 1, 1)
	color.w = 1
	gui.animate(node, gui.PROP_COLOR, color, gui.EASING_LINEAR, 0.1)
end

function setBoxData(boxCol, boxRow, boxChar, boxName)
	msg.post("/searchLevel#searchScript", "tile_selected", {col = boxCol, row = boxRow, char = boxChar})
	if node1 == nil then
		node1 = gui.get_node(boxName)
		node1Col = boxCol
		node1Row = boxRow
		node1Char = boxChar
		highlight_box(node1)
	else
		if node2 == nil then
			node2 = gui.get_node(boxName)
			node2Col = boxCol
			node2Row = boxRow
			node2Char = boxChar
			if check_if_valid_nodes() == true then 
				-- if in word bank
				--       | highlight all boxes in between these two
				--       | mark word as found

				-- highlight_box(node2)
				highlight_valid()
			else
				-- unhighlight both
				-- null both
				unhighlight_box(node1)
				unhighlight_box(node2)
				node1 = nil
				node2 = nil
			end
		else
			-- both node1 and node2 set
			--
			-- would not be a normal case, highlights are nulled
			-- upon node2 selection and checks 
			-- (either word exists and marked green, or it doesn't - both are nulled)
			unhighlight_valid()
			-- unhighlight_box(node1)
			-- unhighlight_box(node2)
			node1 = nil
			node2 = nil
			setBoxData(boxCol, boxRow, boxChar, boxName)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

-- Blake Methods Start Here --
function check_if_valid_nodes()
	if node1Row == node2Row then
		return true
	elseif node1Col == node2Col then
		return true
	elseif math.abs(node1Row-node2Row) == math.abs(node1Col-node2Col) then
		return true
	else
		return false
	end
end

function clear_board()
	for c=0, 11 do
		for r=0, 11 do
			-- print("letter"..c.."-"..r)
			gui.set_text(gui.get_node("letter"..c.."-"..r), " ")
			gui.set_color(gui.get_node("tile"..c.."-"..r), vmath.vector4(0.9, 0.9, 0.9, 1))
		end
	end
end

function place_word(wordIndex)
	-- WORD PLACEMENT ALGO  (recursive)
	-- place word in random spot where enough room exists (randomize diag, horiz, vert)
	-- if no place found, go back and re-place previous words
	-- if found, advance to next word
	::placeAnotherWord::
	wordIndex = wordIndex+1

	-- == BASE CASE == all words placed
	if wordIndex > wordBankSize then
		print("Index: "..wordIndex)
		print("Size of word bank: "..wordBankSize)
		return true
	end
	
	-- == STEP ONE == first, try to place word
	local currentWord = wordBank.words[wordIndex]
	local currentWordLength = string.len(currentWord)
	local tryCol = 1
	local tryRow = 1
	local placed = false

	-- for extra randomness, start at random col/row (don't always start at 0/11)
	-- create tables for both, randomize order of elements
	local colArrIndeces = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}
	local rowArrIndeces = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

	colArrIndeces = shuffle(colArrIndeces)
	rowArrIndeces = shuffle(rowArrIndeces)

	for c=1, 12 do
		tryCol = colArrIndeces[c]
		for r=1, 12 do
			tryRow = rowArrIndeces[r]
			local result = check_all_direction_for_placement(tryCol, tryRow, currentWord)
			print("Result for word \""..currentWord.."\" @ ("..tryCol..", "..tryRow.."): "..tostring(result))
			if result == false then
				-- run next iter
				goto nextCoordinates
			else
				print("Attempting to write word: \""..currentWord.."\" @ ("..tryCol..", "..tryRow..")")
				write_word(currentWord, result, tryCol, tryRow)
				-- do recursive call to new word
				-- if recursive call returns false, clear word placement
				-- else return true
				-- if place_word(wordIndex+1) == false then
				-- 	print("Calling unwrite_word()...")
				-- 	unwrite_word(currentWord, result, tryCol, tryRow)
				-- 	goto nextCoordinates
				-- else
				print("Word placed! \""..currentWord.."\" @ ("..tryCol..", "..tryRow..")")
				goto placeAnotherWord
				--end
			end
			::nextCoordinates::
		end
	end
end

function write_word(word, direction, col, row)
	local wordLen = string.len(word) - 1
	local newLetter;

	-- for c in word:gmatch(".[\128-\191]*") do
	-- 	print("Printing letter: "..c)
	-- end
	local i = 0
	if direction == "colLeft" then
		-- place (col--, row stays same)
		-- for i=0, wordLen do
		-- 	print("Writing letter \""..string.sub(word, i+1, i+1).."\"")
		-- 	gui.set_text(gui.get_node("letter"..col-i.."-"..row), string.sub(word, i+1, i+1))
		-- end

		--.[\128-\191]*
		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			print("Writing letter \""..c.."\"")
			gui.set_text(gui.get_node("letter"..col-i.."-"..row), c)
			i = i+1
		end
	elseif direction == "colRight" then
		-- place (col++, row stays same)
		-- for i=0, wordLen do
		-- 	print("Writing letter \""..string.sub(word, i+1, i+1).."\"")
		-- 	gui.set_text(gui.get_node("letter"..col+i.."-"..row), string.sub(word, i+1, i+1))
		-- end

		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			print("Writing letter \""..c.."\"")
			gui.set_text(gui.get_node("letter"..col+i.."-"..row), c)
			i = i+1
		end
	elseif direction == "rowUp" then
		-- place (col stays same, row--)
		-- for i=0, wordLen do
		-- 	print("Writing letter \""..string.sub(word, i+1, i+1).."\"")
		-- 	gui.set_text(gui.get_node("letter"..col.."-"..row-i), string.sub(word, i+1, i+1))
		-- end
		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			print("Writing letter \""..c.."\"")
			gui.set_text(gui.get_node("letter"..col.."-"..row-i), c)
			i = i+1
		end
	elseif direction == "rowDown" then
		-- place (col stays same, row++)
		-- for i=0, wordLen do
		-- 	print("Writing letter \""..string.sub(word, i+1, i+1).."\"")
		-- 	gui.set_text(gui.get_node("letter"..col.."-"..row+i), string.sub(word, i+1, i+1))
		-- end
		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			print("Writing letter \""..c.."\"")
			gui.set_text(gui.get_node("letter"..col.."-"..row+i), c)
			i = i+1
		end
	elseif direction == "upRight" then
		-- place (col++, row--)
		-- for i=0, wordLen do
		-- 	print("Writing letter \""..string.sub(word, i+1, i+1).."\"")
		-- 	gui.set_text(gui.get_node("letter"..col+i.."-"..row-i), string.sub(word, i+1, i+1))
		-- end
		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			print("Writing letter \""..c.."\"")
			gui.set_text(gui.get_node("letter"..col+i.."-"..row-i), c)
			i = i+1
		end
	elseif direction == "upLeft" then
		-- place (col--, row--)
		-- for i=0, wordLen do
		-- 	print("Writing letter \""..string.sub(word, i+1, i+1).."\"")
		-- 	gui.set_text(gui.get_node("letter"..col-i.."-"..row-i), string.sub(word, i+1, i+1))
		-- end
		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			print("Writing letter \""..c.."\"")
			gui.set_text(gui.get_node("letter"..col-i.."-"..row-i), c)
			i = i+1
		end
	elseif direction == "dnRight" then
		-- place (col++, row++)
		-- for i=0, wordLen do
		-- 	print("Writing letter \""..string.sub(word, i+1, i+1).."\"")
		-- 	gui.set_text(gui.get_node("letter"..col+i.."-"..row+i), string.sub(word, i+1, i+1))
		-- end
		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			print("Writing letter \""..c.."\"")
			gui.set_text(gui.get_node("letter"..col+i.."-"..row+i), c)
			i = i+1
		end
	elseif direction == "dnLeft" then
		-- place (col--, row++)
		-- for i=0, wordLen do
		-- 	print("Writing letter \""..string.sub(word, i+1, i+1).."\"")
		-- 	gui.set_text(gui.get_node("letter"..col-i.."-"..row+i), string.sub(word, i+1, i+1))
		-- end
		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			print("Writing letter \""..c.."\"")
			gui.set_text(gui.get_node("letter"..col-i.."-"..row+i), c)
			i = i+1
		end
	else
		print("Unexpected param for \"direction\" received in function place_word.")
	end
end

function unwrite_word(word, direction, col, row)
	local wordLen = string.len(word) - 1
	if direction == "colLeft" then
		-- place (col--, row stays same)
		for i=0, wordLen do
			gui.set_text(gui.get_node("letter"..col-i.."-"..row), " ")
		end
	elseif direction == "colRight" then
		-- place (col++, row stays same)
		for i=0, wordLen do
			gui.set_text(gui.get_node("letter"..col+i.."-"..row), " ")
		end
	elseif direction == "rowUp" then
		-- place (col stays same, row--)
		for i=0, wordLen do
			gui.set_text(gui.get_node("letter"..col.."-"..row-i), " ")
		end
	elseif direction == "rowDown" then
		-- place (col stays same, row++)
		for i=0, wordLen do
			gui.set_text(gui.get_node("letter"..col.."-"..row+i), " ")
		end
	elseif direction == "upRight" then
		-- place (col++, row--)
		for i=0, wordLen do
			gui.set_text(gui.get_node("letter"..col+i.."-"..row-i), " ")
		end
	elseif direction == "upLeft" then
		-- place (col--, row--)
		for i=0, wordLen do
			gui.set_text(gui.get_node("letter"..col-i.."-"..row-i), " ")
		end
	elseif direction == "dnRight" then
		-- place (col++, row++)
		for i=0, wordLen do
			gui.set_text(gui.get_node("letter"..col+i.."-"..row+i), " ")
		end
	elseif direction == "dnLeft" then
		-- place (col--, row++)
		for i=0, wordLen do
			gui.set_text(gui.get_node("letter"..col-i.."-"..row+i), " ")
		end
	else
		print("Unexpected param for \"direction\" received in function place_word.")
	end
end

function GetTableLng(tbl)
	local getN = 0
	for n in pairs(tbl) do 
		getN = getN + 1 
	end
	return getN
end

function removebyKey(tab, val)
	--print("REMOVING FROM OPTIONS TABLE...")
	for k,v in pairs(tab) do
		--print(v)
		if val == v then
			--print("!== FOUND VALUE!!")
			tab[k] = nil
		end  
	end
end

function DumpTable(o)
	print("DUMPING TABLE...")
	for k,v in pairs(o) do
		print(v)  
	end
end

function check_all_direction_for_placement(col, row, word)
	-- check if word has enough room in a direction
	-- OR if intersection matches up with word
	local existingString = ""
	local currentWordLength = 0
	-- This does NOT work: string.len(word) - 1
	-- Word length using stock string.len method with Japanese chars produces unpredictable results
	-- This works:
	for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
		currentWordLength = currentWordLength+1
	end
	-- loops should start at one (go from init value to equal value)
	-- do this to set this properly
	currentWordLength = currentWordLength-1
	print("Length of word \""..word.."\": "..currentWordLength)


	-- random order of placement
	-- this further randomizes the order of options checked, to produce different puzzles
	-- every time
	local randomIndex = 0
	local alreadyCompletedTable = {}
	local optionsTable = {"colLeft", "colRight", "rowUp", "rowDown","upRight", "upLeft", "dnLeft", "dnRight"}
	local newOption = ""
	
	::checkAnother::
	newOption = ""
	existingString = ""
	-- check to see if all options have been checked
	if GetTableLng(alreadyCompletedTable) == 8 then
		return false
	end

	if GetTableLng(optionsTable) == 0 then
		return false
	end
	
	-- this I think enables randomness for a bunch of stuff I'm pretty sure
	math.randomseed(os.clock()*100000000000)
	-- generate random num from 1 to optionTable size
	randomIndex = math.random(1, GetTableLng(optionsTable))
	newOption = optionsTable[randomIndex]
	for key,value in pairs(alreadyCompletedTable) do
		if alreadyCompletedTable[key] == newOption then
			-- option has already been checked (and it failed)
			-- give it a new option, start over
			-- print("==== ALREADY CHECKED "..newOption..", retrying...")
			removebyKey(optionsTable, newOption)
			-- DumpTable(optionsTable)
			goto checkAnother
		end
	end
	
	-- interpret result
	if newOption == "colLeft" then
		goto colLeft
	elseif newOption == "colRight" then
		goto colRight
	elseif newOption == "rowUp" then
		goto rowUp
	elseif newOption == "rowDown" then
		goto rowDown
	elseif newOption == "upRight" then
		goto upRight
	elseif newOption == "upLeft" then
		goto upLeft
	elseif newOption == "dnLeft" then
		goto dnLeft
	elseif newOption == "dnRight" then
		goto dnRight
	end
	
	-- check col ( <--- left)
	::colLeft::
	for i=0, currentWordLength do
		if (col-i) < 0 then
			-- end process, go to next - this check failed
			print("=== Failed check for colLeft: reached position ("..col-i..", "..row..")")
			-- add to alreadyCompletedTable
			table.insert(alreadyCompletedTable, "colLeft")
			goto checkAnother
		else
			existingString = existingString..gui.get_text(gui.get_node("letter"..col-i.."-"..row))
		end
	end
	-- check if strings fit together, if so return true
	if words_match(word, existingString) then
		return "colLeft"
	else
		table.insert(alreadyCompletedTable, "colLeft")
		goto checkAnother
	end
	-- check col ( ---> right)
	::colRight::
	existingString = ""
	for i=0, currentWordLength do
		if col+i > 11 then
			-- incrementing columns (traveling right), col++
			-- end process, go to next - this check failed
			print("=== Failed check for colRight: reached position ("..col+i..", "..row..")")
			-- add to alreadyCompletedTable
			table.insert(alreadyCompletedTable, "colRight")
			goto checkAnother
		else
			existingString = existingString..gui.get_text(gui.get_node("letter"..col+i.."-"..row))
		end
	end
	-- check if strings fit together, if so return true
	if words_match(word, existingString) then
		return "colRight"
	else
		table.insert(alreadyCompletedTable, "colRight")
		goto checkAnother
	end
	-- check row (^^ up ^^)
	::rowUp::
	existingString = ""
	for i=0, currentWordLength do
		if row-i < 0 then
			-- row decreasing (going up), row--
			-- end process, this check failed
			print("=== Failed check for rowUp: reached position ("..col..", "..row-i..")")
			-- add to alreadyCompletedTable
			table.insert(alreadyCompletedTable, "rowUp")
			goto checkAnother
		else
			existingString = existingString..gui.get_text(gui.get_node("letter"..col.."-"..row-i))
		end
	end
	-- check if strings fit together, if so return true
	if words_match(word, existingString) then
		return "rowUp"
	else
		table.insert(alreadyCompletedTable, "rowUp")
		goto checkAnother
	end
	-- check row (vv down vv)
	::rowDown::
	existingString = ""
	for i=0, currentWordLength do
		if row+i > 11 then
			-- row increasing (going down), row++
			-- end process, this check failed
			print("=== Failed check for rowDown: reached position ("..col..", "..row+i..")")
			-- add to alreadyCompletedTable
			table.insert(alreadyCompletedTable, "rowDown")
			goto checkAnother
		else
			existingString = existingString..gui.get_text(gui.get_node("letter"..col.."-"..row+i))
		end
	end
	-- check if strings fit together, if so return true
	if words_match(word, existingString) then
		return "rowDown"
	else
		table.insert(alreadyCompletedTable, "rowDown")
		goto checkAnother
	end
	-- upRight /^
	-- (1 is beginning of line, 3 is end)
	-- [ ][ ][3]
	-- [ ][2][ ]
	-- [1][ ][ ]
	::upRight::
	existingString = ""
	for i=0, currentWordLength do
		if col+i > 11 or row-i < 0 then
			-- end process, this check failed
			-- up right /^, col++ row--
			print("=== Failed check for upRight: reached position ("..col+i..", "..row-i..")")
			-- add to alreadyCompletedTable
			table.insert(alreadyCompletedTable, "upRight")
			goto checkAnother
		else
			existingString = existingString..gui.get_text(gui.get_node("letter"..col+i.."-"..row-i))
		end
	end
	-- check if strings fit together, if so return true
	if words_match(word, existingString) then
		return "upRight"
	else
		table.insert(alreadyCompletedTable, "upRight")
		goto checkAnother
	end
	-- upLeft ^\
	-- (1 is beginning of line, 3 is end)
	-- [3][ ][ ]
	-- [ ][2][ ]
	-- [ ][ ][1]
	::upLeft::
	existingString = ""
	for i=0, currentWordLength do
		if col-i < 0 or row-i < 0 then
			-- end process, this check failed
			print("=== Failed check for upLeft: reached position ("..col-i..", "..row-i..")")
			-- add to alreadyCompletedTable
			table.insert(alreadyCompletedTable, "upLeft")
			goto checkAnother
		else
			existingString = existingString..gui.get_text(gui.get_node("letter"..col-i.."-"..row-i))
		end
	end
	-- check if strings fit together, if so return true
	if words_match(word, existingString) then
		return "upLeft"
	else
		table.insert(alreadyCompletedTable, "upLeft")
		goto checkAnother
	end
	-- dnLeft v/
	-- (1 is beginning of line, 3 is end)
	-- [ ][ ][1]
	-- [ ][2][ ]
	-- [3][ ][ ]
	::dnLeft::
	existingString = ""
	for i=0, currentWordLength do
		if col-i < 0 or row+i > 11 then
			-- end process, this check failed
			print("=== Failed check for dnLeft: reached position ("..col+i..", "..row-i..")")
			-- add to alreadyCompletedTable
			table.insert(alreadyCompletedTable, "dnLeft")
			goto checkAnother
		else
			existingString = existingString..gui.get_text(gui.get_node("letter"..col-i.."-"..row+i))
		end
	end
	-- check if strings fit together, if so return true
	if words_match(word, existingString) then
		return "dnLeft"
	else
		table.insert(alreadyCompletedTable, "dnLeft")
		goto checkAnother
	end
	-- dnRight \v
	-- (1 is beginning of line, 3 is end)
	-- [ ][ ][1]
	-- [ ][2][ ]
	-- [3][ ][ ]
	::dnRight::
	existingString = ""
	for i=0, currentWordLength do
		if col+i > 11 or row+i > 11 then
			-- end process, this check failed
			print("=== Failed check for dnRight: reached position ("..col+i..", "..row-i..")")
			-- add to alreadyCompletedTable
			table.insert(alreadyCompletedTable, "dnRight")
			goto checkAnother
		else
			existingString = existingString..gui.get_text(gui.get_node("letter"..col+i.."-"..row+i))
		end
	end
	-- check if strings fit together, if so return true
	if words_match(word, existingString) then
		return "dnRight"
	else
		table.insert(alreadyCompletedTable, "dnRight")
		goto checkAnother
	end
	-- all checks have run
	-- if true has not yet been returned, no possible placement
	::checkFailed::
	return false
end

-- if word is empty (all spaces), return true
-- if word letters match up (i.e. "cat", "_a_"), return true
function words_match(word, existing)
	-- Japanese chars using string.len produces unpredicatble results
	-- Do it this way
	local wordLength = 0
	local existingLength = 0
	for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
		wordLength = wordLength+1
	end
	for c in existing:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
		existingLength = existingLength+1
	end
	if wordLength ~= existingLength then
		print("Word and existing not equal length. Word: "..wordLength..", Existing: "..existingLength)
		return false
	else
		print("NOW CHECKING WORD: "..word..", EXISTING: "..existing)
		-- super mega janky
		-- but has to be done, gmatch is only way I know to work around
		-- lua string methods not supporting japanese chars
		local wordCurrChar = 0
		local existCurrChar = 0

		-- start at 0 index of existing 
		-- loop until not an empty character
		-- chack same index of word 
		--   if it matches keep looking to next charcater in existing 
		--   else return false 

		
		for c in word:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
			wordCurrChar = wordCurrChar+1
			existCurrChar = 0
			for d in existing:gmatch("[%z\1-\127\194-\244][\128-\191]*") do
				existCurrChar = existCurrChar+1
				if wordCurrChar > existCurrChar then 
					-- haven't reached same char yet
					-- do nothing
				elseif wordCurrChar == existCurrChar then
					--these chars should match
					print("")
					if c == d then
						print("EQUAL LETTERS DETECTED @ position "..wordCurrChar.." ("..word..", "..existing.."): "..c..", "..d)
						-- in theory, here is where chars can overlap
						-- not working for some reason
						-- do nothing, break and keep going
						--return false
						break
					elseif d == " " then
						-- this space is free, and can be used by this char
						break
					else
						-- words do not match, return false
						print("MISMATCH LETTERS DETECTED @ position "..wordCurrChar.." ("..word..", "..existing.."): "..c..", "..d)
						return false
					end
				else
					-- loop has passed character needed to check 
					break
				end
			end
			
		end	
		-- local length = wordLength
		-- for i=1, length do
		-- 	if string.sub(existing, i, i) == " "  then
		-- 		goto continue
		-- 	elseif string.sub(word, i, i) == string.sub(existing, i, i) then
		-- 		goto continue
		-- 	else
		-- 		return false
		-- 	end
		-- 	::continue::
		-- end
	end
	
	return true
end

function shuffle(t)
	local tbl = {}
	for i = 1, #t do
		tbl[i] = t[i]
	end
	for i = #tbl, 2, -1 do
		local j = math.random(i)
		tbl[i], tbl[j] = tbl[j], tbl[i]
	end
	return tbl
end

-- for debugging tables
function dump(o)
	if type(o) == 'table' then
		local s = '{ '
		for k,v in pairs(o) do
			if type(k) ~= 'number' then k = '"'..k..'"' end
			s = s .. '['..k..'] = ' .. dump(v) .. ','
		end
		return s .. '} '
	else
		return tostring(o)
	end
end
-- End Blake Methods --