local globalProps = require("main.scripts.globalProperties")
-- puzzleSelect.gui_script

-- == THIS IS WHERE THE WORD BANKS ARE --

local showTutorial = false
local wordBank
local categories = {
	["アニメ"]="anime", 
	["スポーツ"]="sports",
	["学校"]="school",
	["犬の種類"]="dog",
	["テニス"]="tennis",
	["オリンピック"]="olympics",
	["有名な人"]="famous",
	["フェアリーテール"]="princess",
	["国々"]="earth",
	["職業"]="salaryman",
	["テキサス"]="texas",
	["かわいい動物"]="cow",
	["生き物"]="panda",
	["大学の専攻"]="daigaku",
	["祝日"]="santa",
	["外来語"]="foreignWords",
	["和食 #1"]="natto",
	["和食 #2"]="dango",
	["健康的な食べ物"]="healthy",
	["日本の昔話"]="kappa",
	["ハリー・ポッター"]="harryPotter",
	["マスコット"]="helloKitty",
	["日本の都道府県"]="japan",
	["電話/郵便/番組"]="tv",
	["人生"]="life",
	["旅行"]="travel",
	["家"]="house",
	["家具家電"]="fan",
	["車"]="car",
	["トラフィック"]="traffic",
	["病気"]="sick",
	["趣味"]="hobby",
	["家族"]="family",
	["食べ物"]="foodbox",
	["買い物"]="shopping",
	["Majors (601D)"]="daigakusei"
}
local categoryIndexTable = {
	-- "アニメ", 
	-- "スポーツ",
	-- "学校",
	-- "犬の種類", --check this!!
	-- "テニス",
	-- "オリンピック",
	-- "有名な人",
	-- "フェアリーテール",
	-- "国々",
	-- "職業", -- check this!!
	-- "テキサス",
	-- "かわいい動物",
	-- "生き物",
	-- "大学の専攻",
	-- "祝日",
	-- "外来語",
	-- "和食 #1",
	-- "和食 #2",
	-- "健康的な食べ物",
	-- "日本の昔話",
	-- "ハリー・ポッター",
	-- "マスコット",
	-- "日本の都道府県"
}

local puzzleGroups = {
	"All",
	"Sports",
	"Living Things",
	"Places",
	"Food",
	"Characters",
	"Other",
}

local groupAll = {
	"アニメ", 
	"スポーツ",
	"学校",
	"犬の種類", --check this!!
	"テニス",
	"オリンピック",
	"有名な人",
	"フェアリーテール",
	"国々",
	"職業", -- check this!!
	"テキサス",
	"かわいい動物",
	"生き物",
	"大学の専攻",
	"祝日",
	"外来語",
	"和食 #1",
	"和食 #2",
	"健康的な食べ物",
	"日本の昔話",
	"ハリー・ポッター",
	"マスコット",
	"日本の都道府県",
	"電話/郵便/番組",
	"人生",
	"旅行",
	"家",
	"家具家電",
	"車",
	"トラフィック",
	"病気",
	"趣味",
	"家族",
	"食べ物",
	"買い物",
	"Majors (601D)"
}

local groupSports = {
	"スポーツ",
	"テニス",
	"オリンピック"
}

local groupLivingThings = {
	"かわいい動物",
	"生き物",
	"犬の種類",
	"有名な人"
}

local groupPlaces = {
	"学校",
	"国々",
	"テキサス",
	"日本の都道府県"
}

local groupFood = {
	"和食 #1",
	"和食 #2",
	"健康的な食べ物"
}

local groupCharacters = {
	"アニメ", 
	"ハリー・ポッター",
	"マスコット",
	"日本の昔話",
	"フェアリーテール",
}

local groupMisc = {
	"大学の専攻",
	"祝日",
	"外来語",
	"職業"
}

local groupLength = 0 -- number of puzzle groups
local groupIndex = 1

categoryIndexTable = groupAll

local categorySize

local backBackIndex
local backIndex
local currentIndex
local nextIndex
local nextNextIndex

function handle_group_change(indexInc)
	groupIndex = groupIndex + indexInc
	if groupIndex < 1 then
		groupIndex = groupLength
	elseif groupIndex > groupLength then
		groupIndex = 1
	end
	gui.set_text(gui.get_node("groupName"), puzzleGroups[groupIndex])
	
	if puzzleGroups[groupIndex] == "All" then
		categoryIndexTable = groupAll
		categorySize = 36
	elseif puzzleGroups[groupIndex] == "Sports" then
		categoryIndexTable = groupSports
		categorySize = 3
	elseif puzzleGroups[groupIndex] == "Living Things" then
		categoryIndexTable = groupLivingThings
		categorySize = 4
	elseif puzzleGroups[groupIndex] == "Places" then
		categoryIndexTable = groupPlaces
		categorySize = 4
	elseif puzzleGroups[groupIndex] == "Food" then
		categoryIndexTable = groupFood
		categorySize = 3
	elseif puzzleGroups[groupIndex] == "Characters" then
		categoryIndexTable = groupCharacters
		categorySize = 5
	elseif puzzleGroups[groupIndex] == "Other" then
		categoryIndexTable = groupMisc
		categorySize = 4
	end
	sound.play("/background#select", {delay = 0, gain = 0.5, speed = 1})
	init_group_carousel() 
	set_category_nodes()
end

function init_group_carousel() 
	if categorySize < 3 then
		backBackIndex = 1
		backIndex = 2
		currentIndex = 1
		nextIndex = 2
		nextNextIndex = 1
	elseif categorySize == 3 then
		backBackIndex = 2
		backIndex = 3
		currentIndex = 1
		nextIndex = 2
		nextNextIndex = 3
	elseif categorySize == 4 then
		backBackIndex = 3
		backIndex = 4
		currentIndex = 1
		nextIndex = 2
		nextNextIndex = 3
	else
		backBackIndex = categorySize-1
		backIndex = categorySize
		currentIndex = 1
		nextIndex = 2
		nextNextIndex = 3
	end
end

function set_category_nodes()
	gui.play_flipbook(gui.get_node("backBackIcon"), categories[categoryIndexTable[backBackIndex]])
	gui.play_flipbook(gui.get_node("backIcon"), categories[categoryIndexTable[backIndex]])
	gui.play_flipbook(gui.get_node("mainIcon"), categories[categoryIndexTable[currentIndex]])
	gui.play_flipbook(gui.get_node("forwardIcon"), categories[categoryIndexTable[nextIndex]])
	gui.play_flipbook(gui.get_node("forwardForwardIcon"), categories[categoryIndexTable[nextNextIndex]])
	gui.set_text(gui.get_node("playButtonText"), categoryIndexTable[currentIndex])
end

function shift_left()
	backBackIndex = backBackIndex + 1
	backIndex = backIndex+1
	currentIndex = currentIndex+1
	nextIndex = nextIndex+1
	nextNextIndex = nextNextIndex + 1
	keep_category_in_bounds()
	set_category_nodes()
	if globalProps.muted == false then
		sound.play("/background#select", {delay = 0, gain = 0.5, speed = 1})
	end
end

function shift_right()
	backBackIndex = backBackIndex - 1
	backIndex = backIndex-1
	currentIndex = currentIndex-1
	nextIndex = nextIndex-1
	nextNextIndex = nextNextIndex - 1
	keep_category_in_bounds()
	set_category_nodes()
	if globalProps.muted == false then
		sound.play("/background#select",  {delay = 0, gain = 0.5, speed = 1})
	end
end

function keep_category_in_bounds()
	-- if category is less than 5
	


	
	if backBackIndex > categorySize then
		backBackIndex = 1
	end
	if backBackIndex < 1 then
		backBackIndex = categorySize
	end
	if backIndex > categorySize then
		backIndex = 1
	end
	if backIndex < 1 then
		backIndex = categorySize
	end
	if nextIndex > categorySize then
		nextIndex = 1
	end
	if nextIndex < 1 then
		nextIndex = categorySize
	end
	if nextNextIndex > categorySize then
		nextNextIndex = 1
	end
	if nextNextIndex < 1 then
		nextNextIndex = categorySize
	end
	if currentIndex > categorySize then
		currentIndex = 1
	end
	if currentIndex < 1 then
		currentIndex = categorySize
	end
end

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	handle_group_change(0)
	for k,v in pairs(puzzleGroups) do
		groupLength = groupLength+1
	end
	gui.set_color(gui.get_node("tutorialGraphic"), vmath.vector4(0, 0, 0, 0))
	if globalProps.muted == false then
		sound.play("/background#menuMusic", {delay = 0, gain = 0.5, speed = 1})
		gui.set_texture(gui.get_node("muteBtn"), "transparent")
		gui.play_flipbook(gui.get_node("muteBtn"), "unmute")
	else
		gui.set_texture(gui.get_node("muteBtn"), "transparent")
		gui.play_flipbook(gui.get_node("muteBtn"), "mute")
	end
	categorySize = 0
	for _ in pairs(categoryIndexTable) do categorySize = categorySize + 1 end

	backBackIndex = categorySize-1
	backIndex = categorySize -- last elem in table
	currentIndex = 1
	nextIndex = 2
	nextNextIndex = 3

	print("PUZZLE SELECT INIT")
	set_category_nodes()
	msg.post(".", "acquire_input_focus")
	-- Working words: "ナルト", "ルフィ", "ライト", "アラジン", "コナン", "シロエ"

	-- THIS WORKS???
	-- wordBank = {"apple6789098", "pear56789098", "forest789098", "cat484836789", "hellopi87654", "alamohgd98fp", "longhornh721", "howdy82aplsm", "blake091posd", "texaslskjdmu", "austin052lsm", "football2005"}

	-- "longhorn", "royal", "football", "texas", "vince", "mccoy", "applewhite", "basketball", "baseball", "jester", "duren", "kinsolving", "littlefield", "horns", "dobie", "cowboys", "smokey", "bevo", "campbell", "williams", "howdy"
	wordBank = {"longhorn", "royal", "texas", "vince", "mccoy", "applewhite", "jester", "kinsolving","littlefield","horns","dobie","cowboys","smokey","campbell","williams"}
	wordDef = {
				["longhorn"]="A bovine animal native to Texas.", 
				["royal"]="Last name of a former football coach who led the Longhorns to win 3 national titles.",
				["texas"]="The greatest state in the USA.",
				["vince"]="Led the 2005 Texas Longhorns to a historic BCS National Championship win against USC.",
				["mccoy"]="Led the 2009 Texas Longhorns to a BCS National Championship appearance against Alabama.",
				["applewhite"]="Played QB at Texas when Ricky Williams won the Heisman trophy.",
				["jester"]="Name of what used to be the largest college dorm in the United States.",
				["kinsolving"]="Name of an all-female dorm in north campus.",
				--new words start here
				["littlefield"]="Family with a lot of history at UT - they have both a mansion and a fountain donning their name on campus.",
				["horns"]="5-letter word, used in the phrase \"Hook \'em _____.",
				["dobie"]="Surname of a native Texas writer and folklorist. Has a 27-story apartment building named after him near campus.",
				["cowboys"]="Name of a men's social org who, prior being suspended, operated the cannon at football games.",
				["smokey"]="The name of the cannon used at UT football games.",
				["campbell"]="1977 Heisman trophy winner, retired jersey #20 for the Texas Longhorns.",
				["williams"]="1998 Heisman trophy winner, retired jersey #34 for the Texas Longhorns."
			}
	-- wordBank = {"ナルト", "ルフィ", "ルルーシュヴィブリタニア", "ライト", "ボボボーボボーボボ", "アラジン", "ゴンフリークス", "コナン", "アレンウォーカー", "シロエ", "エドワードエルリック", "ピカチュウ"}
	-- ナルト ルフィ ルルーシュヴィブリタニア ライト ボボボーボボーボボ アラジン ゴンフリークス コナン アレンウォーカー シロエ エドワードエルリック ピカチュウ
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action.pressed and gui.pick_node(gui.get_node("selectPuzzle"), action.x, action.y) then
		-- sound.play("/background#buttonSound", {delay = 0, gain = 0.8, speed = 1})
		print("Puzzle selected")
		--msg.post("/mainMenu#main", "start_searchLevel")

		--msg.post("/puzzleSelect#puzzleSelect1", "start_searchLevel")
		msg.post("main:/mainMenu#main", "start_searchLevel")
		

		
		print("CATEGORY SELECTED, CHANGING LEVELS...")
		msg.post("/puzzleSelect#puzzleSelect1", "set_word_bank", {words = wordBank})
		msg.post("/puzzleSelect#puzzleSelect1", "set_word_def", {def = wordDef})
		msg.post("/puzzleSelect#puzzleSelect1", "set_bank", {bankName = categoryIndexTable[currentIndex]})
	end
	if action.pressed and gui.pick_node(gui.get_node("forwardArrow"), action.x, action.y) then
		print("Left arrow pressed: ")
		shift_left()
	end
	if action.pressed and gui.pick_node(gui.get_node("backArrow"), action.x, action.y) then
		shift_right()
	end
	if showTutorial == false and action.pressed and gui.pick_node(gui.get_node("muteBtn"), action.x, action.y) then
		handleMute()
	end
	if action.pressed and gui.pick_node(gui.get_node("tutorialBtn"), action.x, action.y) then
		showTutorial = true
		gui.set_color(gui.get_node("tutorialGraphic"), vmath.vector4(1, 1, 1, 1))
	end
	if action.pressed and gui.pick_node(gui.get_node("leftGroup"), action.x, action.y) then
		handle_group_change(-1)
	end
	if action.pressed and gui.pick_node(gui.get_node("rightGroup"), action.x, action.y) then
		handle_group_change(1)
	end
	if showTutorial then
		if action.pressed and gui.pick_node(gui.get_node("closeBtn"), action.x, action.y) then
			showTutorial = false
			gui.set_color(gui.get_node("tutorialGraphic"), vmath.vector4(0, 0, 0, 0))
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function handleMute() 
	if globalProps.muted == false then
		sound.stop("/background#menuMusic")
		gui.set_texture(gui.get_node("muteBtn"), "transparent")
		gui.play_flipbook(gui.get_node("muteBtn"), "mute")
		globalProps.muted = true
	else
		sound.play("/background#menuMusic", {delay = 0, gain = 0.5, speed = 1})
		gui.set_texture(gui.get_node("muteBtn"), "transparent")
		gui.play_flipbook(gui.get_node("muteBtn"), "unmute")
		globalProps.muted = false
	end
end